#!/bin/bash
### Twotac Setup
TACLOG="/var/log/taclogs/taclog"
TACCONF="/etc/twotac/twotac.conf"
title="                                      Twotac Setup                                       "
# Titlebanner is equal to the title length via printf
titlelength=${#title}
printf -v titlebanner '%*s' "$titlelength"
#This is where the current variables will be stored
source $TACCONF
#Files variable may need work and may need to automatically gather file names/paths from a function
DIR=$(find /etc/twotac/twotac.conf /etc/tacacs+/tac_plus.conf /etc/postfix/main.cf /etc/cron.weekly/ /opt/bin/ /opt/tacconfigs/ /opt/tacmail/ /var/www/html/ -type f)
FILES="$DIR"
### Opening log announcement
echo "Started twotacsetup" >> $TACLOG
### Functions
twotacconfigurations () {
	if [ "$FIRSTSETUP" = true ]; then
		echo "FIRSTSETUP=$FIRSTSETUP" >> $TACLOG
		title="                                  Twotac Configurations                                  "
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
	fi
	echo ""
	echo "Checking for installed files..."
	echo "...Checking for installed files..." >> $TACLOG
	if [ /etc/tacacs+/tac_plus.conf ]; then
		tacacs="tacacs+"
		echo "...tacacs+..." >> $TACLOG
	else
		tacacs=""
	fi
	if [ /etc/postfix/main.cf ]; then
		postfix="postfix"
		echo "...postfix..." >> $TACLOG
	else
		postfix=""
	fi
	if [ /etc/pam.d/tac_plus ]; then
		pam="pam"
		echo "...pam..." >> $TACLOG
	else
		pam=""
	fi
	if [ /etc/apache2/apache2.conf ]; then
		apache2="apache2"
		echo "...apache2..." >> $TACLOG
	else
		apache2=""
	fi
	if [ "$tacacs" ] || [ "$postfix" ] || [ "$pam" ]; then
		echo ""
		echo "It looks like these configurations are available to overwrite:"
		echo ""
		if [ "$tacacs" ]; then
			echo -e "$tacacs"
		fi
		if [ "$postfix" ]; then
			echo -e "$postfix"
		fi
		if [ "$pam" ]; then
			echo -e "$pam"
		fi
		echo ""
		echo "Would you like to overwrite your standard configurations for the twotac default configuration? (y/n)"
		yesno
		if [[ "$yn" =~ ^[Nn](o)?$ ]]; then
			echo "...Default config overwrite cancelled..." >> $TACLOG
			break
		fi
		if [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			echo "...Default config overwrite enabled..." >> $TACLOG
			CONFIGURED=false
		if [ "$tacacs" ]; then
			echo "...tacacs+ overwritten..." >> $TACLOG
			tacacs=$(cat /opt/tacconfigs/tacacs+/tac_plus.conf)
			sudo echo "" > /etc/tacacs+/tac_plus.conf
			sudo echo "$tacacs" >> /etc/tacacs+/tac_plus.conf
		fi
		if [ "$postfix" ]; then
			echo "...postfix overwritten..." >> $TACLOG
			postfix=$(cat /opt/tacconfigs/postfix/main.cf)
			sudo echo "" > /etc/postfix/main.cf
			sudo echo "$postfix" >> /etc/postfix/main.cf
		fi
		if [ "$pam" ]; then
			echo "...pam overwritten..." >> $TACLOG
			pam=$(cat /opt/tacconfigs/pam.d/tac_plus)
			sudo echo "" > /etc/pam.d/tac_plus
			sudo echo "$pam" >> /etc/pam.d/tac_plus
		fi
		fi
		echo ""
		echo ""
		if ! [ "$apache2" ] && [ "$tacacs" ] && [ "$postfix" ] && [ "$pam" ]; then
			echo "Some dependencies still aren't installed"
			echo "...Some dependencies still aren't installed..." >> $TACLOG
			echo "Please install"
			if ! [ "$tacacs" ]; then
				echo -e "tacacs+"
				echo "...tacacs+..." >> $TACLOG
			fi
			if ! [ "$postfix" ]; then
				echo -e "postfix"
				echo "...postfix..." >> $TACLOG
			fi
			if ! [ "$pam" ]; then
				echo -e "pam"
				echo "...pam..." >> $TACLOG
			fi
			if ! [ "$apache2" ]; then
				echo -e "apache2"
				echo "...apache2..." >> $TACLOG
			fi
			echo "Twotac will not work as intended until you install all dependencies"
		fi
	else
		echo "It doesn't look like any dependencies are installed."
		echo "...No dependencies installed..." >> $TACLOG
		echo "Please install"
		echo "...Please install: tacacs+ postfix pam apache2..." >> $TACLOG
		if ! [ "$tacacs" ]; then
			echo -e "tacacs+"
		fi
		if ! [ "$postfix" ]; then
			echo -e "postfix"
		fi
		if ! [ "$pam" ]; then
			echo -e "pam"
		fi
		if ! [ "$apache2" ]; then
			echo -e "apache2"
		fi
		echo "This software will not work as intended until you do."
	fi
	echo "Rewriting twotac config data..."
	echo "...First time setup configuring twotac.conf..." >> $TACLOG
}
organizationname () {
	#This function will change the organization name
	showchanges
	title="                                    Organization Name                                    "
	until [[ "$yn" =~ ^[Yy](es)?$ ]]; do
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
		echo -e " Currently, the organization name is $ORG \n What would you like to change it to?"
		if [ "$NEWORG" ]; then
			echo -e "The current replacement is $NEWORG"
		fi
		echo ""
		read TEMPORG
		echo ""
		echo " $TEMPORG will be your new organization name"
		yesnocancel
		if [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
			break
		elif [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			NEWORG="$TEMPORG"
			echo "$ORG \t::::\t $NEWORG" >> $TACLOG
			CONFIGURED=false
		fi
	done
}
webhostname () {
	#This function will adjust the hostname. Note the format should be http://hostname.com without trailng slashes.
	showchanges
	title="                                      Web Host Name                                      "
	until [[ "$yn" =~ ^[Yy](es)?$ ]]; do
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
		echo -e " Currently, the website's hostname is $WEB \n What would you like to change it to?"
		echo " NOTE: If you would like to make this site https, include it in the hostname"
		echo " Example format: https://tacacs.com     (do not leave a trailing /)"
		if [ "$NEWWEB" ]; then
			echo -e "The current replacement is $NEWWEB"
		fi
		echo ""
		read TEMPWEB
		echo ""
		echo " $TEMPWEB will be your new host address"
		yesnocancel
		if [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
			break
		elif [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			NEWWEB="$TEMPWEB"
			echo "$WEB \t::::\t $NEWWEB" >> $TACLOG
			CONFIGURED=false
		fi
	done
}
administratormail () {
	#This function adjusts the administrator who will typically run the mail system and receive copy of all sent mail
	showchanges
	title="                                   Administrator Mail                                    "
	until [[ "$yn" =~ ^[Yy](es)?$ ]]; do
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
		echo -e " Currently, the admin's mail address is $MAIL \n What would you like to change it to?"
		if [ "$NEWMAIL" ]; then
			echo -e "The current replacement is $NEWMAIL"
		fi
		echo ""
		read TEMPMAIL
		echo ""
		echo " $TEMPMAIL will be your new admin's e-mail"
		yesnocancel
		if [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
			break
		elif [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			NEWMAIL="$TEMPMAIL"
			echo "$MAIL \t::::\t $NEWMAIL" >> $TACLOG
			CONFIGURED=false
		fi
	done
}
smtprelayhost () {
	#This function will attempt to configure SMTP for further use, but postfix may require more direct configuration
	showchanges
	title="                                     SMTP Relay Host                                     "
	until [[ "$yn" =~ ^[Yy](es)?$ ]]; do
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
		echo -e " Currently, the SMTP host is $SMTP \n What would you like to change it to?"
		echo " Example: smtp.gmail.com     (or your organization's smtp server address)"
		if [ "$NEWSMTP" ]; then
			echo -e "The current replacement is $NEWSMTP"
		fi
		echo ""
		read TEMPSMTP
		echo ""
		echo " $TEMPSMTP will be your new SMTP host"
		yesnocancel
		if [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
			break
		elif [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			NEWSMTP="$TEMPSMTP"
			echo "$SMTP \t::::\t $NEWSMTP" >> $TACLOG
			CONFIGURED=false
		fi
	done
}
tacacskey () {
	#This function will change the Tacacs+ key, which will require reconfiguration of network devices to be functional
	showchanges
	title="                                       TACACS+ Key                                       "
	until [[ "$yn" =~ ^[Yy](es)?$ ]]; do
		echo ${titlebanner// /=}
		echo "$title"
		echo ${titlebanner// /=}
		echo -e " Currently, the TACACS+ key is $KEY \n What would you like to change it to?"
		echo " ***WARNING, YOU WILL NEED TO CHANGE ALL ROUTER CONFIGS TO MATCH THE NEW ONE***"
			if [ "$NEWKEY" ]; then
				echo -e "The current replacement is $NEWKEY"
			fi
		echo ""
		read TEMPKEY
		echo ""
		echo " $TEMPKEY is your new TACACS+ key. If your routers don't match, they will be inaccessible"
		yesnocancel
		if [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
			break
		elif [[ "$yn" =~ ^[Yy](es)?$ ]]; then
			NEWKEY="$TEMPKEY"
			echo "$KEY \t::::\t $NEWKEY" >> $TACLOG
			CONFIGURED=false
		fi
	done
}
showchanges () {
	title="                                   Configuration Changes                                 "
	if [ "$NEWORG" ] || [ "$NEWWEB" ] || [ "$NEWMAIL" ] || [ "$NEWSMTP" ] || [ "$NEWKEY" ]; then
	echo ${titlebanner// /=}
	echo "$title"
	echo ${titlebanner// /=}
	echo -e " Original#::::#New" >> /tmp/tacjunk
	if [ "$NEWORG" ]; then
		echo -e " $ORG#::::#$NEWORG" >> /tmp/tacjunk
	fi
	if [ "$NEWWEB" ]; then
		echo -e " $WEB#::::#$NEWWEB" >> /tmp/tacjunk
	fi
	if [ "$NEWMAIL" ]; then
		echo -e " $MAIL#::::#$NEWMAIL" >> /tmp/tacjunk
	fi
	if [ "$NEWSMTP" ]; then
		echo -e " $SMTP#::::#$NEWSMTP" >> /tmp/tacjunk
	fi
	if [ "$NEWKEY" ]; then
		echo -e " $KEY#::::#$NEWKEY" >> /tmp/tacjunk
	fi
	cat /tmp/tacjunk | column -t -s '#'
	rm /tmp/tacjunk
	fi
	echo ""
}
configurationcommit () {
	#This function will take $NEWVAR and overwrite $VAR
	showchanges
	read -p " Are you certain you want to commit these changes? There will be no way to undo them. (yes/no)" yn
	case $yn in
		[Yy]* )
			COMMIT=true
			sed -i 's/FIRSTSETUP\=false/FIRSTSETUP\=true/g' $TACCONF
			if [ "$NEWORG" ]; then
				echo "$NEWORG COMMITTED" >> $TACLOG
				sed -i "s/$ORG/$NEWORG/g" $FILES
				NEWORG=""
				fi
			if [ "$NEWWEB" ]; then
				echo "$NEWWEB COMMITTED" >> $TACLOG
				sed -i "s#$WEB#$NEWWEB#g" $FILES
				#Removes the https:// or http:// from the postfix config for compatibility
				sed -i "s#https://##g" /etc/postfix/main.cf
				sed -i "s#http://##g" /etc/postfix/main.cf
				NEWWEB=""
				fi
			if [ "$NEWMAIL" ]; then
				echo "$NEWMAIL COMMITTED" >> $TACLOG
				sed -i "s/$MAIL/$NEWMAIL/g" $FILES
				NEWMAIL=""
				fi
			if [ "$NEWSMTP" ]; then
				echo "$NEWSMTP COMMITTED" >> $TACLOG
				sed -i "s/$SMTP/$NEWSMTP/g" $FILES
				NEWSMTP=""
				fi
			if [ "$NEWKEY" ]; then
				echo "$NEWKEY COMMITTED" >> $TACLOG
				sed -i "s/$KEY/$NEWKEY/g" $FILES
				NEWKEY=""
				fi
			CONFIGURED=true;;
	[Nn]* ) COMMIT=false;continue;;
	esac
}
doall () {
	echo "Running all configurations" >> $TACLOG
	twotacconfigurations
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		organizationname
	fi
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		webhostname
	fi
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		administratormail
	fi
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		smtprelayhost
	fi
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		tacacskey
	fi
	if ! [[ "$yn" =~ ^[Cc](ancel)?$ ]]; then
	yn="n"
		configurationcommit
	fi
}
firstsetup () {
	clear
	title="                                   First Time Setup                                 "
	echo ${titlebanner// /=}
	echo "$title"
	echo ${titlebanner// /=}
	if ! [ "$yn"="Yes" ]; then
		echo ""
		echo "This looks like your first time running Twotac Setup, "
		echo "would you like to skip straight to setup? (y/n)"
		echo ""
		yesno
	fi
	if [[ "$yn" =~ ^[Nn](o)?$ ]]; then
		echo "...First time setup cancelled..." >> $TACLOG
		FIRSTSETUP=true
		break
	else
		doall
		FIRSTSETUP=true
		sed -i 's/FIRSTSETUP\=false/FIRSTSETUP\=true/g' $TACCONF
		echo ""
		echo "Do you want to go back to the manager? (y/n)"
		echo ""
		yesno
		if [[ "$yn" =~ ^[Nn](o)?$ ]]; then
			return 0;
		else
			GOBACK=true
		fi
	fi
}
yesno () {
	yn=""
	while true; do
		read yn
		case $yn in
			[Yy]* ) yn="Yes"; return 0;;
			[Nn]* ) yn="No"; echo "Cancelling..."; return 0;;
			* ) echo "Please answer yes, no or cancel.";;
		esac
	done
}
yesnocancel () {
	yn=""
	while true; do
		read -p " Would you like to continue? \"No\" will restart this section (y/n/c)" yn
		case $yn in
			[Yy]* ) yn="Yes"; return 0;;
			[Nn]* ) echo "Try again"; return 0;;
			[Cc]* ) yn="Cancel"; echo "Cancelling..."; return 0;;
			* ) echo "Please answer yes, no or cancel.";;
		esac
	done
}
exit0 () {
	echo "Program exiting successfully" >> $TACLOG
	exit 0
}
exit1 () {
	echo "Program failed! Exiting" | tee -a $TACLOG
	exit 1
}
### Program Start
echo "COMMIT=$COMMIT" >> $TACLOG
COMMIT=false
while [ "$COMMIT" = false ]; do
if [ "$FIRSTSETUP" = false ]; then
	echo "FIRSTSETUP=$FIRSTSETUP" >> $TACLOG
	firstsetup
	if [ "$GOBACK" ]; then
		return 0
	fi
fi
clear
echo ${titlebanner// /=}
echo "$title"
echo ${titlebanner// /=}
echo " Available commands:"
echo " For a quick edit to all variables, enter A"
echo " To edit the organization name,     enter 1"
echo " To edit the website's hostname,    enter 2"
echo " To edit the admin's mail address,  enter 3"
echo " To configure your SMTP relay host, enter 4"
echo " To configure your TACACS+ key,     enter 5"
echo " To commit changes to memory,       enter C"
echo " To exit,                           enter Q"
#Checks if a file has been configured using the $CONFIGURED variable
	if [ "$CONFIGURED" ] && [ "$CONFIGURED" = false ] && [ "$COMMIT" = false ]; then
		echo ""
		echo " **NOTE: IF YOU DO NOT COMMIT, CHANGES WILL NOT BE SAVED**"
	fi
echo -e ""
#If changes have been made in the form of $NEWVAR, it will appear before your selection
showchanges
echo ${titlebanner// /=}
echo " Enter your selection"
echo ${titlebanner// /=}
echo ""
read answer
case $answer in
	[Aa] ) #This case changes all settings in order, allowing reviews at the end before committing changes
		doall;;
	1 ) #This case will change the organization name
		organizationname;;
	2 ) #This case will adjust the hostname. Note the format should be http://hostname.com without trailng slashes.
		webhostname;;
	3 ) #This case adjusts the administrator who will typically run the mail system and receive copy of all sent mail
		administratormail;;
	4 ) #This case will attempt to configure SMTP for further use, but postfix may require more direct configuration
		smtprelayhost;;
	5 ) #This will change the Tacacs+ key, which will require reconfiguration of network devices to be functional
		tacacskey;;
	[Cc] ) #This case will take $NEWVAR and overwrite $VAR
		configurationcommit;;
	[Qq] ) #Return to the manager or exit the program
		return 0 2>/dev/null || exit0;;
esac
done